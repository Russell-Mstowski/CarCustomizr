<main class="page-content" id="bgimage">
  <!--Start section-->
  <section class="text-center text-md-left offset-1">
    <div class="container">
      <style>
        * {
          box-sizing: border-box;
          -moz-box-sizing: border-box;
        }

        body {
          color: #000;
          font-family:Monospace;
          font-size:13px;

          background-color: #fff;
          margin: 0px;
        }

        #info {
          position: absolute;
          top: 100px; width: 100%;
          padding: 5px;
          text-align:center;
        }

        #content {
          position: absolute;
          top: 100px; width: 100%;
          z-index: 1;
          padding: 3em 0 0 0;
        }

        a {
          color: #0080ff;
        }

        #c {
          position: fixed;
          left: 0px;
          width: 100%;
          height: 100%;
        }

        .list-item {
          display: inline-block;
          margin: 1em;
          padding: 1em;
          box-shadow: 1px 2px 4px 0px rgba(0,0,0,0.25);
          transition: opacity 4s ease-in-out;
        }

        .list-item .scene {
          width: 200px;
          height: 200px;
        }

        .list-item .description {
          color: #888;
          font-family: sans-serif;
          font-size: large;
          width: 200px;
          margin-top: 0.5em;
        }

      </style>

      <canvas id="c"></canvas>

      <div id="content">
      </div>

      <script id="template" type="notjs">
        <div class="scene"></div>
        <div class="description"><a href="/customizations">Customization $</a></div>
      </script>

      <script>
        /* global THREE, Detector */
        $.getJSON('/api/v1/customizations', function(carData) {
          console.log(carData);
        

        // var carData = [{id: 1, model: "avent.obj", material: "greenavent.mtl"}, {id: 2, model: "avent.obj", material: "purpleavent.mtl"}];

        if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

        var canvas;

        var scenes = [], renderer;

        init();
        animate();

        function init() {

          canvas = document.getElementById( "c" );

          var template = document.getElementById( "template" ).text;
          var content = document.getElementById( "content" );

          var mtlLoader = new THREE.MTLLoader();

          function createScene(object, i) {
            var scene = new THREE.Scene();
            // make a list item
            var element = document.createElement( "div" );
            element.className = "list-item";
            element.innerHTML = template.replace( '$', i );
            // Look up the element that represents the area
            // we want to render the scene
            scene.userData.element = element.querySelector( ".scene" );
            content.appendChild( element );
            var camera = new THREE.PerspectiveCamera( 50, 1, 1, 10 );
            camera.position.x = -5;
            camera.position.y = 4;
            camera.position.z = 4;
            scene.userData.camera = camera;
            var controls = new THREE.OrbitControls( scene.userData.camera, scene.userData.element );
            controls.enableZoom = true;
            scene.userData.controls = controls;
            // var zoom = new THREE.TrackballControls( camera, element );
            scene.add( new THREE.HemisphereLight( 0xaaaaaa, 0x444444 ) );
            var light = new THREE.DirectionalLight( 0xffffff, 3 );
            light.position.set( 1, 1, 1 );
            scene.add( light );
            scene.add(object);
            scenes.push( scene );
          }

          carData.forEach(function(car) {
            mtlLoader.load( "/car_models/" + car.color, function(materials) {
              materials.preload();
              var loader = new THREE.OBJLoader();
              loader.setMaterials( materials );
              loader.load( "car_models/" + car.name, function(object) {
                // scene.add(object);
                console.log('car', car);
                createScene(object, car.id);
              });
            });
          });

          renderer = new THREE.WebGLRenderer( {canvas: canvas, antialias: true} );
          renderer.setClearColor( 0xffffff, 0.5 );
          renderer.setClearColor( 0x000000, 0 );
          renderer.setPixelRatio( window.devicePixelRatio );

        }

        function updateSize() {

          var width = canvas.clientWidth;
          var height = canvas.clientHeight;

          if ( canvas.width !== width || canvas.height != height ) {

            renderer.setSize( width, height, false );

          }

        }

        function animate() {

          render();
          requestAnimationFrame( animate );

        }

        function render() {

          updateSize();

          renderer.setClearColor( 0xffffff );
          renderer.setScissorTest( false );
          renderer.clear();

          renderer.setClearColor( 0xe0e0e0 );
          renderer.setScissorTest( true );

          scenes.forEach( function( scene ) {

            // so something moves
            // console.log(scene.children.length, scene.children);
            // scene.children[0].rotation.y = Date.now() * 0.0005;
            // scene.children[1].rotation.y = Date.now() * 0.0005;
            scene.children[2].rotation.y = Date.now() * 0.0005;

            // get the element that is a place holder for where we want to
            // draw the scene
            var element = scene.userData.element;

            // get its position relative to the page's viewport
            var rect = element.getBoundingClientRect();

            // check if it's offscreen. If so skip it
            if ( rect.bottom < 0 || rect.top  > renderer.domElement.clientHeight ||
               rect.right  < 0 || rect.left > renderer.domElement.clientWidth ) {

              return;  // it's off screen

            }

            // set the viewport
            var width  = rect.right - rect.left;
            var height = rect.bottom - rect.top;
            var left   = rect.left;
            var bottom = renderer.domElement.clientHeight - rect.bottom;

            renderer.setViewport( left, bottom, width, height );
            renderer.setScissor( left, bottom, width, height );

            var camera = scene.userData.camera;

            //camera.aspect = width / height; // not changing in this example
            //camera.updateProjectionMatrix();

            //scene.userData.controls.update();

            renderer.render( scene, camera );

          } );

        }
        });
      </script>
    </div>
  </section>
  <!--End section-->
</main>